// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SportsEventManager.Data;
using System;

namespace SportsEventManager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180513195613_nullableStartTime")]
    partial class nullableStartTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportsEventManager.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Ended");

                    b.Property<string>("GuestName")
                        .IsRequired();

                    b.Property<string>("HostName")
                        .IsRequired();

                    b.Property<DateTime?>("Started");

                    b.HasKey("Id");

                    b.ToTable("EventDbSet");
                });

            modelBuilder.Entity("SportsEventManager.Models.Football", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("GuestScore");

                    b.Property<int>("HostScore");

                    b.Property<string>("TournamentName");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("FootballDbSet");
                });

            modelBuilder.Entity("SportsEventManager.Models.Tennis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("GuestGameScore");

                    b.Property<int>("GuestScore");

                    b.Property<int>("GuestSetScore");

                    b.Property<int>("HostGameScore");

                    b.Property<int>("HostScore");

                    b.Property<int>("HostSetScore");

                    b.Property<string>("TournamentName");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("TennisDbSet");
                });

            modelBuilder.Entity("SportsEventManager.Models.Volleyball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("GuestScore");

                    b.Property<int>("GuestSetScore");

                    b.Property<int>("HostScore");

                    b.Property<int>("HostSetScore");

                    b.Property<string>("TournamentName");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("VolleyballDbSet");
                });

            modelBuilder.Entity("SportsEventManager.Models.Football", b =>
                {
                    b.HasOne("SportsEventManager.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportsEventManager.Models.Tennis", b =>
                {
                    b.HasOne("SportsEventManager.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportsEventManager.Models.Volleyball", b =>
                {
                    b.HasOne("SportsEventManager.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
